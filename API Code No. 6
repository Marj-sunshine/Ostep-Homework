#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    printf("hello (pid:%d)\n", (int)getpid());

    int rc = fork();
    if (rc < 0) { // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) { // child (new process)
        printf("child (pid:%d)\n", (int)getpid());
        execl("/bin/ls", "ls", NULL);
        fprintf(stderr, "execl() failed\n");
        exit(1);
    } else { // parent process
        int status;
        pid_t rc_wait = waitpid(rc, &status, 0);
        printf("parent of %d (rc_wait:%d) (pid:%d)\n", rc, rc_wait, (int)getpid());

        if (WIFEXITED(status)) {
            printf("Child exited with status: %d\n", WEXITSTATUS(status));
        } else if (WIFSIGNALED(status)) {
            printf("Child was terminated by signal: %d\n", WTERMSIG(status));
        }
    }
    return 0;
}
