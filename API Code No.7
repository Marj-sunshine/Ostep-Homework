#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    printf("hello (pid:%d)\n", (int) getpid());

    int rc = fork();
    if (rc < 0) { // fork failed; exit
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (rc == 0) { // child (new process)
        printf("child (pid:%d) before closing stdout\n", (int) getpid());

        // Close the standard output file descriptor
        close(STDOUT_FILENO);

        // Attempt to print to stdout after it has been closed
        printf("child (pid:%d) after closing stdout\n", (int) getpid());

        // Exit the child process
        exit(0);
    } else { // parent goes down this path
        int rc_wait = wait(NULL);
        printf("parent of %d (rc_wait:%d) (pid:%d)\n", rc, rc_wait, (int) getpid());
    }
    return 0;
}
