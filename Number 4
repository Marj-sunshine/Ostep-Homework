//No. 4
/*Write a program that calls fork() and then calls some form of
exec() to run the program /bin/ls. See if you can try all of the
variants of exec(), including (on Linux) execl(), execle(),
execlp(), execv(), execvp(), and execvpe(). Why do
you think there are so many variants of the same basic call?*/


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

void use_execl() {
    printf("Child process (pid: %d) using execl()\n", (int)getpid());
    execl("/bin/ls", "ls", NULL);
    fprintf(stderr, "execl() failed\n");
    exit(1);
}

void use_execle() {
    printf("Child process (pid: %d) using execle()\n", (int)getpid());
    char *envp[] = { "PATH=/bin", NULL };
    execle("/bin/ls", "ls", NULL, envp);
    fprintf(stderr, "execle() failed\n");
    exit(1);
}

void use_execlp() {
    printf("Child process (pid: %d) using execlp()\n", (int)getpid());
    execlp("ls", "ls", NULL);
    fprintf(stderr, "execlp() failed\n");
    exit(1);
}

void use_execv() {
    printf("Child process (pid: %d) using execv()\n", (int)getpid());
    char *args[] = { "ls", NULL };
    execv("/bin/ls", args);
    fprintf(stderr, "execv() failed\n");
    exit(1);
}

void use_execvp() {
    printf("Child process (pid: %d) using execvp()\n", (int)getpid());
    char *args[] = { "ls", NULL };
    execvp("ls", args);
    fprintf(stderr, "execvp() failed\n");
    exit(1);
}

void use_execvpe() {
#ifdef _GNU_SOURCE
    printf("Child process (pid: %d) using execvpe()\n", (int)getpid());
    char *args[] = { "ls", NULL };
    char *envp[] = { "PATH=/bin", NULL };
    execvpe("ls", args, envp);
    fprintf(stderr, "execvpe() failed\n");
    exit(1);
#endif
}

int main(int argc, char *argv[]) {
    pid_t pid;

    // execl example
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (pid == 0) {
        use_execl();
    } else {
        wait(NULL);
    }

    // execle example
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (pid == 0) {
        use_execle();
    } else {
        wait(NULL);
    }

    // execlp example
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (pid == 0) {
        use_execlp();
    } else {
        wait(NULL);
    }

    // execv example
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (pid == 0) {
        use_execv();
    } else {
        wait(NULL);
    }

    // execvp example
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (pid == 0) {
        use_execvp();
    } else {
        wait(NULL);
    }

    // execvpe example (if supported)
#ifdef _GNU_SOURCE
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "fork failed\n");
        exit(1);
    } else if (pid == 0) {
        use_execvpe();
    } else {
        wait(NULL);
    }
#endif

    return 0;
}
